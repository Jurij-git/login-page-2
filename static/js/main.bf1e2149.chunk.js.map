{"version":3,"sources":["components/Button.jsx","components/Description.jsx","App.js","serviceWorker.js","index.js"],"names":["Button","children","type","onClick","buttonStyle","buttonSize","Description","props","descriptionText","personData","Submit","name","document","getElementById","console","log","npi","address","phone","email","value","alert","validateAll","match","validateName","validateAddress","validatePhone","focus","validateEmail","saveData","App","className","id","Boolean","window","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bf1e2149.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Button.css';\r\n\r\nconst Button = ({\r\n    children,\r\n    type,\r\n    onClick,\r\n    buttonStyle,\r\n    buttonSize\r\n}) => {\r\n\r\n    return(\r\n        <button onClick={onClick} type={type} >\r\n            {children}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button;\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\nconst Description = (props) =>{\r\n    return <text>{props.descriptionText}</text>\r\n}\r\n\r\nexport default Description;","import React from 'react';\n\nimport './App.css';\nimport Button from './components/Button';\nimport Description from \"./components/Description\";\n\nfunction validateName(name)   //return true if passed\n{\n    let named = /^[a-zA-Z]+ [a-zA-Z]+$/;\n    if(name.value.match(named))\n    {\n        return true;\n    }\n    else\n    {\n        alert(\"Wrong name!\");\n        return false;\n    }\n}\n\nfunction validateAddress(address)   //return true if passed\n{\n    let addressd = /^[a-zA-Z0-9\\s,'-]*$/;\n    if(address.value.match(addressd))\n    {\n        return true;\n    }\n    else\n    {\n        alert(\"Wrong address!\");\n        return false;\n    }\n}\n\nfunction validatePhone(phone)   //return true if passed\n{\n    let phoneno = /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/;\n    if(phone.value.match(phoneno))\n    {\n        return true;\n    }\n    else\n    {\n        alert(\"Wrong phone number!\");\n        return false;\n    }\n}\n\nfunction validateEmail(email)   //return true if passed\n{\n    let mailFormat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if(email.value.match(mailFormat))\n    {\n        email.focus();\n        return true;\n    }\n    else\n    {\n        alert(\"You have entered an invalid email address!\");\n        email.focus();\n        return false;\n    }\n}\n\nfunction validateAll(name,npi,address,phone,email)  //return true if passed\n{\n    if((email.value == \"\")||(npi.value == \"\")||(address.value == \"\")||(phone.value == \"\")||(email.value == \"\"))\n    {\n        alert(\"All fields are mandatory!\");\n        return false;\n    }\n    else\n    {\n        return true;\n    }\n}\n\nlet personData =  { \"name\":\"\", \"npi\":\"\", \"address\":\"\", \"phone\":\"\", \"email\":\"\"};\n\nfunction saveData(name,npi,address,phone,email)\n{\n    personData.name = name.value;\n    personData.npi = npi.value;\n    personData.address = address.value;\n    personData.phone = phone.value;\n    personData.email = email.value;\n}\n\nfunction Submit() {\n    let name = document.getElementById(\"name\");\n    console.log(name);\n\n    let npi = document.getElementById(\"npi\");\n    console.log(npi);\n\n    let address = document.getElementById(\"address\");\n    console.log(address)\n\n    let phone = document.getElementById(\"phone\");\n    console.log(phone);\n\n    let email = document.getElementById(\"email\");\n    console.log(email);\n\n    if(\n        validateAll(name,npi,address,phone,email) &&\n        validateName(name) &&\n        validateAddress(address) &&\n        validatePhone(phone) &&\n        validateEmail(email)\n    )\n    {\n        console.log(personData);\n        saveData(name,npi,address,phone,email);\n        console.log(personData);\n        alert(\"Registration successful, please confirm to redirect\");\n    }\n}\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n      <body>\n      <div>\n        <p><Description descriptionText = \"First and Last Name:\"/></p>\n        <p><input id = \"name\" type=\"text\" name=\"name\"/></p>\n        <p><Description descriptionText = \"NPI number:\"/></p>\n        <p><input id = \"npi\" type=\"text\" name=\"npi\"/></p>\n        <p><Description descriptionText = \"Business Address:\"/></p>\n        <p><input id = \"address\" type=\"text\" name=\"address\"/></p>\n        <p><Description descriptionText = \"Telephone Number:\"/></p>\n        <p><input id = \"phone\" type=\"text\" name=\"phone\"/></p>\n        <p><Description descriptionText = \"Email address:\"/></p>\n        <p><input id = \"email\" type=\"text\" name=\"email\"/></p>\n        <p><Button onClick={Submit} >Submit</Button></p>\n      </div>\n      <footer className=\"App-footer\">\n      </footer>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}